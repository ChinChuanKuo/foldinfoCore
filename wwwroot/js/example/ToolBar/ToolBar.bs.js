// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReactIntl from "react-intl";
import * as Tab$BtsCore from "../../material-ui/core/Tabs/Tab.bs.js";
import * as Data$BtsCore from "../../features/Data.bs.js";
import * as Tabs$BtsCore from "../../material-ui/core/Tabs/Tabs.bs.js";
import * as Icons$BtsCore from "../../material-ui/icon/Icons.bs.js";
import * as Image$BtsCore from "../Medias/Image.bs.js";
import * as Media$BtsCore from "../Medias/Media.bs.js";
import * as AppBar$BtsCore from "../../material-ui/core/AppBar/AppBar.bs.js";
import * as Button$BtsCore from "../../material-ui/core/Button/Button.bs.js";
import * as Setting$BtsCore from "../../setting/Setting.bs.js";
import * as Tooltip$BtsCore from "../../material-ui/core/Tooltip/Tooltip.bs.js";
import * as Axiosapi$BtsCore from "../../features/Axiosapi.bs.js";
import * as GridItem$BtsCore from "../../material-ui/core/Grid/GridItem.bs.js";
import * as MenuItem$BtsCore from "../../material-ui/core/MenuItem/MenuItem.bs.js";
import * as IconAction$BtsCore from "../../material-ui/core/IconStyle/IconAction.bs.js";
import * as IconButton$BtsCore from "../../material-ui/core/IconButton/IconButton.bs.js";
import * as PasteBoard$BtsCore from "../../material-ui/core/PasteBoard/PasteBoard.bs.js";
import * as SelectMenu$BtsCore from "../../material-ui/core/Menu/SelectMenu.bs.js";
import * as DialogTitle$BtsCore from "../../material-ui/core/Dialog/DialogTitle.bs.js";
import * as IconGeneral$BtsCore from "../../material-ui/core/IconStyle/IconGeneral.bs.js";
import * as OtherUpload$BtsCore from "../Uploads/OtherUpload.bs.js";
import * as DialogActions$BtsCore from "../../material-ui/core/Dialog/DialogActions.bs.js";
import * as DialogContent$BtsCore from "../../material-ui/core/Dialog/DialogContent.bs.js";
import * as GridContainer$BtsCore from "../../material-ui/core/Grid/GridContainer.bs.js";
import * as IconAnimation$BtsCore from "../../controls/IconAnimation.bs.js";
import * as SelectStandard$BtsCore from "../../material-ui/core/Select/SelectStandard.bs.js";
import * as BackgroundBoard$BtsCore from "../Boards/BackgroundBoard.bs.js";
import * as PasteInformation$BtsCore from "../../material-ui/core/PasteBoard/PasteInformation.bs.js";
import * as ProgressCircular$BtsCore from "../../material-ui/core/Progress/ProgressCircular.bs.js";
import * as TextFieldOutline$BtsCore from "../../material-ui/core/TextField/TextFieldOutline.bs.js";
import * as DialogContentText$BtsCore from "../../material-ui/core/Dialog/DialogContentText.bs.js";
import * as DialogAnimationBottom$BtsCore from "../../material-ui/core/Dialog/DialogAnimationBottom.bs.js";

function reducer(state, action) {
  if (typeof action === "number") {
    switch (action) {
      case /* ShowName */0 :
          var newrecord = Caml_obj.caml_obj_dup(state);
          newrecord.showName = !state.showName;
          return newrecord;
      case /* ShowSize */1 :
          var newrecord$1 = Caml_obj.caml_obj_dup(state);
          newrecord$1.showSize = !state.showSize;
          return newrecord$1;
      case /* ShowAlign */2 :
          var newrecord$2 = Caml_obj.caml_obj_dup(state);
          newrecord$2.showAlign = !state.showAlign;
          return newrecord$2;
      case /* ShowMore */3 :
          var newrecord$3 = Caml_obj.caml_obj_dup(state);
          newrecord$3.showMore = !state.showMore;
          return newrecord$3;
      case /* ShowAnimation */4 :
      case /* CloseAnimation */5 :
          break;
      
    }
  } else {
    switch (action.tag | 0) {
      case /* ClickNameMenu */0 :
          var newrecord$4 = Caml_obj.caml_obj_dup(state);
          newrecord$4.name = action[0];
          newrecord$4.showName = false;
          return newrecord$4;
      case /* SettingUploadFile */1 :
          var newrecord$5 = Caml_obj.caml_obj_dup(state);
          newrecord$5.extension = action[7];
          newrecord$5.encryption = action[6];
          newrecord$5.original = action[5];
          newrecord$5.imagePath = action[4];
          newrecord$5.src = action[3];
          newrecord$5.showAudio = action[2];
          newrecord$5.showVideo = action[1];
          newrecord$5.showImage = action[0];
          return newrecord$5;
      case /* ClickItemTab */2 :
          var index = action[0];
          var newrecord$6 = Caml_obj.caml_obj_dup(state);
          newrecord$6.index = index;
          newrecord$6.tabitems = List.mapi((function (i, tabitem) {
                  return {
                          showTab: index === i,
                          tabImage: tabitem.tabImage
                        };
                }), state.tabitems);
          return newrecord$6;
      case /* ShowDrop */3 :
          var newrecord$7 = Caml_obj.caml_obj_dup(state);
          newrecord$7.showDrop = action[0];
          return newrecord$7;
      case /* ShowFile */4 :
          var newrecord$8 = Caml_obj.caml_obj_dup(state);
          newrecord$8.showFile = action[0];
          return newrecord$8;
      case /* ChangeWebsite */5 :
          var newrecord$9 = Caml_obj.caml_obj_dup(state);
          newrecord$9.webValue = action[0];
          return newrecord$9;
      
    }
  }
  var newrecord$10 = Caml_obj.caml_obj_dup(state);
  newrecord$10.showAnimation = !state.showAnimation;
  return newrecord$10;
}

var initialState_nameitems = [
  {
    optionPadding: false,
    value: "Microsoft JhengHei"
  },
  {
    optionPadding: false,
    value: "PMingLiU"
  },
  {
    optionPadding: false,
    value: "MingLiU"
  },
  {
    optionPadding: false,
    value: "Sans Serif"
  },
  {
    optionPadding: false,
    value: "Serif"
  },
  {
    optionPadding: false,
    value: "Monospace font"
  },
  {
    optionPadding: false,
    value: "width"
  },
  {
    optionPadding: false,
    value: "narrow"
  },
  {
    optionPadding: false,
    value: "Comic Sans MS"
  },
  {
    optionPadding: false,
    value: "Garamond"
  },
  {
    optionPadding: false,
    value: "Georgia"
  },
  {
    optionPadding: false,
    value: "Tahoma"
  },
  {
    optionPadding: false,
    value: "Trebuchet MS"
  },
  {
    optionPadding: false,
    value: "Verdana"
  }
];

var initialState_sizeitems = [
  {
    disablePadding: false,
    size: "1",
    value: "small"
  },
  {
    disablePadding: false,
    size: "3",
    value: "general"
  },
  {
    disablePadding: false,
    size: "4",
    value: "larger"
  },
  {
    disablePadding: false,
    size: "6",
    value: "largest"
  }
];

var initialState_tabitems = /* :: */[
  {
    showTab: true,
    tabImage: Icons$BtsCore.factoryWhite
  },
  /* :: */[
    {
      showTab: false,
      tabImage: Icons$BtsCore.factoryWhite
    },
    /* :: */[
      {
        showTab: false,
        tabImage: Icons$BtsCore.factoryWhite
      },
      /* :: */[
        {
          showTab: false,
          tabImage: Icons$BtsCore.factoryWhite
        },
        /* :: */[
          {
            showTab: false,
            tabImage: Icons$BtsCore.factoryWhite
          },
          /* [] */0
        ]
      ]
    ]
  ]
];

var initialState = {
  showName: false,
  name: "Sans Serif",
  nameitems: initialState_nameitems,
  showSize: false,
  sizeitems: initialState_sizeitems,
  showAlign: false,
  showMore: false,
  showAnimation: false,
  tabitems: initialState_tabitems,
  index: 0,
  showDrop: false,
  showFile: false,
  showImage: false,
  showVideo: false,
  showAudio: false,
  src: "",
  imagePath: "",
  original: "",
  encryption: "",
  extension: "",
  webValue: ""
};

function ToolBar(Props) {
  var disabled = Props.disabled;
  var width = Props.width;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var fileRef = React.useRef(null);
  var clickUndo = React.useCallback((function (param) {
          document.execCommand("undo", false, "");
          
        }));
  var clickRedo = React.useCallback((function (param) {
          document.execCommand("redo", false, "");
          
        }));
  var showName = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowName */0);
        }));
  var clickNameMenu = React.useCallback((function (value) {
          Curry._1(dispatch, /* ClickNameMenu */Block.__(0, [value]));
          document.execCommand("fontName", false, value);
          
        }));
  var showSize = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowSize */1);
        }));
  var clickSizeMenu = React.useCallback((function (size) {
          document.execCommand("fontSize", false, size);
          
        }));
  var formatBold = React.useCallback((function (param) {
          document.execCommand("bold", false, "");
          
        }));
  var formatItalic = React.useCallback((function (param) {
          document.execCommand("italic", false, "");
          
        }));
  var underline = React.useCallback((function (param) {
          document.execCommand("underline", false, "");
          
        }));
  var showAlign = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowAlign */2);
        }));
  var alignLeft = React.useCallback((function (param) {
          document.execCommand("justifyLeft", false, "");
          
        }));
  var alignCenter = React.useCallback((function (param) {
          document.execCommand("justifyCenter", false, "");
          
        }));
  var alignRight = React.useCallback((function (param) {
          document.execCommand("justifyRight", false, "");
          
        }));
  var insertorderedlist = React.useCallback((function (param) {
          document.execCommand("insertorderedlist", false, "");
          
        }));
  var insertUnorderedlist = React.useCallback((function (param) {
          document.execCommand("insertUnorderedlist", false, "");
          
        }));
  var outdent = React.useCallback((function (param) {
          document.execCommand("outdent", false, "");
          
        }));
  var indent = React.useCallback((function (param) {
          document.execCommand("indent", false, "");
          
        }));
  var showMore = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowMore */3);
        }));
  var showUpload = React.useCallback((function (param) {
          return Curry._1(dispatch, /* ShowAnimation */4);
        }));
  var clickItemTab = React.useCallback((function (i) {
          return Curry._1(dispatch, /* ClickItemTab */Block.__(2, [i]));
        }));
  var dragOverFile = React.useCallback((function ($$event) {
          $$event.preventDefault();
          $$event.stopPropagation();
          return Curry._1(dispatch, /* ShowDrop */Block.__(3, [true]));
        }));
  var dragLeaveFile = React.useCallback((function ($$event) {
          $$event.preventDefault();
          $$event.stopPropagation();
          return Curry._1(dispatch, /* ShowDrop */Block.__(3, [false]));
        }));
  var uploadAJax = function (files) {
    var formData = new FormData();
    formData.append("file", files);
    Axiosapi$BtsCore.Files.upload(formData).then((function (response) {
              var match = response.data.status;
              var tmp;
              if (match === "istrue") {
                Curry._1(dispatch, /* SettingUploadFile */Block.__(1, [
                        response.data.images,
                        response.data.videos,
                        response.data.audios,
                        response.data.src,
                        response.data.imagePath,
                        response.data.original,
                        response.data.encryption,
                        response.data.extension
                      ]));
                tmp = Curry._1(dispatch, /* ShowFile */Block.__(4, [true]));
              } else {
                console.log("upload error");
                tmp = undefined;
              }
              return Promise.resolve(tmp);
            })).catch((function (error) {
            return Promise.resolve((console.log(error), undefined));
          }));
    
  };
  var dropFile = React.useCallback((function ($$event) {
          return (function (value) {
              $$event.preventDefault();
              $$event.stopPropagation();
              Curry._1(dispatch, /* ShowDrop */Block.__(3, [false]));
              return uploadAJax(value);
            });
        }));
  var chooseFile = React.useCallback((function (param) {
          var el = fileRef.current;
          if (!(el == null)) {
            el.click();
            return ;
          }
          
        }));
  var changeFile = React.useCallback(uploadAJax);
  var changeWebSite = React.useCallback((function (value) {
          return Curry._1(dispatch, /* ChangeWebsite */Block.__(5, [value]));
        }));
  var keyDownWebSite = React.useCallback((function (keyCode) {
          if (keyCode === 13) {
            Axiosapi$BtsCore.Files.website(Data$BtsCore.sRowsData("", state.webValue, localStorage.getItem("newid"))).then((function (response) {
                      var match = response.data.status;
                      var tmp;
                      if (match === "istrue") {
                        Curry._1(dispatch, /* SettingUploadFile */Block.__(1, [
                                response.data.images,
                                response.data.videos,
                                response.data.audios,
                                response.data.src,
                                response.data.imagePath,
                                response.data.original,
                                response.data.encryption,
                                response.data.extension
                              ]));
                        tmp = Curry._1(dispatch, /* ShowFile */Block.__(4, [true]));
                      } else {
                        tmp = Curry._1(dispatch, /* ShowFile */Block.__(4, [false]));
                      }
                      return Promise.resolve(tmp);
                    })).catch((function (error) {
                    return Promise.resolve((console.log(error), undefined));
                  }));
            return ;
          }
          
        }));
  var insertFile = React.useCallback((function (param) {
          var match = state.showFile;
          var match$1 = state.showImage;
          var match$2 = state.showVideo;
          var match$3 = state.showAudio;
          if (match) {
            if (match$1) {
              document.execCommand("insertImage", false, state.imagePath + state.src);
            } else if (match$2) {
              document.execCommand("insertHTML", false, "<video style='width:auto;height:200px;border-radius:6px;cursor:pointer;'><source src='" + (state.imagePath + (state.src + "' type='video/mp4' /></video>")));
            } else if (match$3) {
              document.execCommand("insertHTML", false, "<audio style='width:auto;height:200px;border-radius:6px;cursor:pointer;'><source src='" + (state.imagePath + (state.src + "' type='audio/mpeg' /></audio>")));
            } else {
              console.log("123");
            }
          } else {
            console.log("123");
          }
          return Curry._1(dispatch, /* CloseAnimation */5);
        }));
  var closeAnimation = React.useCallback((function (param) {
          return Curry._1(dispatch, /* CloseAnimation */5);
        }));
  var removeFormat = React.useCallback((function (param) {
          document.execCommand("removeFormat", false, "");
          
        }));
  var strikethrough = React.useCallback((function (param) {
          document.execCommand("strikethrough", false, "");
          
        }));
  var tmp;
  if (state.showMore) {
    var match$1 = Setting$BtsCore.intObjects(width) < 900;
    var match$2 = Setting$BtsCore.intObjects(width) < 850;
    var match$3 = Setting$BtsCore.intObjects(width) < 800;
    var match$4 = Setting$BtsCore.intObjects(width) < 750;
    tmp = React.createElement(React.Fragment, undefined, React.createElement(SelectMenu$BtsCore.make, {
              top: "50%",
              transform: "translate(0, -50%)",
              minWidth: "auto",
              maxHeight: "280",
              minHeight: "0",
              topLeft: "12",
              topRight: "12",
              bottomRight: "12",
              bottomLeft: "12",
              paddingRight: "8",
              paddingLeft: "8",
              children: null
            }, React.createElement(MenuItem$BtsCore.make, {
                  top: "0",
                  right: "8",
                  bottom: "0",
                  left: "8",
                  topLeft: "12",
                  topRight: "12",
                  bottomRight: "12",
                  bottomLeft: "12",
                  onClick: showUpload,
                  children: null
                }, React.createElement(Tooltip$BtsCore.make, {
                      location: "top",
                      backgroundColor: "rgba(255,0,0,0.8)",
                      children: React.createElement(ReactIntl.FormattedMessage, {
                            id: "Toolbar.upload",
                            defaultMessage: "Upload"
                          })
                    }), React.createElement(IconGeneral$BtsCore.make, {
                      src: Icons$BtsCore.imageBlack
                    })), React.createElement(MenuItem$BtsCore.make, {
                  top: "0",
                  right: "8",
                  bottom: "0",
                  left: "8",
                  topLeft: "12",
                  topRight: "12",
                  bottomRight: "12",
                  bottomLeft: "12",
                  onClick: removeFormat,
                  children: null
                }, React.createElement(Tooltip$BtsCore.make, {
                      location: "top",
                      backgroundColor: "rgba(255,0,0,0.8)",
                      children: React.createElement(ReactIntl.FormattedMessage, {
                            id: "Toolbar.remove",
                            defaultMessage: "Remove"
                          })
                    }), React.createElement(IconGeneral$BtsCore.make, {
                      src: Icons$BtsCore.formatClearBlack
                    })), React.createElement(MenuItem$BtsCore.make, {
                  top: "0",
                  right: "8",
                  bottom: "0",
                  left: "8",
                  topLeft: "12",
                  topRight: "12",
                  bottomRight: "12",
                  bottomLeft: "12",
                  onClick: strikethrough,
                  children: null
                }, React.createElement(Tooltip$BtsCore.make, {
                      location: "top",
                      backgroundColor: "rgba(255,0,0,0.8)",
                      children: React.createElement(ReactIntl.FormattedMessage, {
                            id: "Toolbar.strike",
                            defaultMessage: "Strike"
                          })
                    }), React.createElement(IconGeneral$BtsCore.make, {
                      src: Icons$BtsCore.strikethroughSBlack
                    })), match$1 ? React.createElement(MenuItem$BtsCore.make, {
                    top: "0",
                    right: "8",
                    bottom: "0",
                    left: "8",
                    topLeft: "12",
                    topRight: "12",
                    bottomRight: "12",
                    bottomLeft: "12",
                    onClick: indent,
                    children: null
                  }, React.createElement(Tooltip$BtsCore.make, {
                        location: "top",
                        backgroundColor: "rgba(255,0,0,0.8)",
                        children: React.createElement(ReactIntl.FormattedMessage, {
                              id: "Toolbar.increase",
                              defaultMessage: "Increase"
                            })
                      }), React.createElement(IconGeneral$BtsCore.make, {
                        src: Icons$BtsCore.formatIndentIncreaseBlack
                      })) : null, match$2 ? React.createElement(MenuItem$BtsCore.make, {
                    top: "0",
                    right: "8",
                    bottom: "0",
                    left: "8",
                    topLeft: "12",
                    topRight: "12",
                    bottomRight: "12",
                    bottomLeft: "12",
                    onClick: outdent,
                    children: null
                  }, React.createElement(Tooltip$BtsCore.make, {
                        location: "top",
                        backgroundColor: "rgba(255,0,0,0.8)",
                        children: React.createElement(ReactIntl.FormattedMessage, {
                              id: "Toolbar.decrease",
                              defaultMessage: "Decrease"
                            })
                      }), React.createElement(IconGeneral$BtsCore.make, {
                        src: Icons$BtsCore.formatIndentDecreaseBlack
                      })) : null, match$3 ? React.createElement(MenuItem$BtsCore.make, {
                    top: "0",
                    right: "8",
                    bottom: "0",
                    left: "8",
                    topLeft: "12",
                    topRight: "12",
                    bottomRight: "12",
                    bottomLeft: "12",
                    onClick: insertUnorderedlist,
                    children: null
                  }, React.createElement(Tooltip$BtsCore.make, {
                        location: "top",
                        backgroundColor: "rgba(255,0,0,0.8)",
                        children: React.createElement(ReactIntl.FormattedMessage, {
                              id: "Toolbar.bullist",
                              defaultMessage: "Bullist"
                            })
                      }), React.createElement(IconGeneral$BtsCore.make, {
                        src: Icons$BtsCore.formatListBulletedBlack
                      })) : null, match$4 ? React.createElement(MenuItem$BtsCore.make, {
                    top: "0",
                    right: "8",
                    bottom: "0",
                    left: "8",
                    topLeft: "12",
                    topRight: "12",
                    bottomRight: "12",
                    bottomLeft: "12",
                    onClick: insertorderedlist,
                    children: null
                  }, React.createElement(Tooltip$BtsCore.make, {
                        location: "top",
                        backgroundColor: "rgba(255,0,0,0.8)",
                        children: React.createElement(ReactIntl.FormattedMessage, {
                              id: "Toolbar.ordlist",
                              defaultMessage: "Ordlist"
                            })
                      }), React.createElement(IconAction$BtsCore.make, {
                        animation: "leftRight",
                        src: Icons$BtsCore.formatListNumberedBlack
                      })) : null), React.createElement(BackgroundBoard$BtsCore.make, {
              showBackground: state.showMore,
              backgroundColor: "transparent",
              onClick: showMore
            }));
  } else {
    tmp = null;
  }
  var match$5 = Setting$BtsCore.intObjects(width) >= 900;
  var match$6 = Setting$BtsCore.intObjects(width) >= 850;
  var match$7 = Setting$BtsCore.intObjects(width) >= 800;
  var match$8 = Setting$BtsCore.intObjects(width) >= 750;
  var tmp$1;
  if (state.showAnimation) {
    var match$9 = state.index;
    var tmp$2;
    switch (match$9) {
      case 0 :
          tmp$2 = React.createElement(OtherUpload$BtsCore.make, {
                webLoad: Setting$BtsCore.disabledObjects(disabled),
                showDrop: state.showDrop,
                showFile: state.showFile,
                showImage: state.showImage,
                showVideo: state.showVideo,
                showAudio: state.showAudio,
                src: state.imagePath + state.src,
                fileRef: fileRef,
                onDragOver: Curry.__1(dragOverFile),
                onDragLeave: Curry.__1(dragLeaveFile),
                onDrop: (function ($$event) {
                    return Curry._2(dropFile, $$event, Caml_array.caml_array_get($$event.nativeEvent.dataTransfer.files, 0));
                  }),
                onClick: chooseFile,
                onChange: (function ($$event) {
                    return Curry._1(changeFile, Caml_array.caml_array_get($$event.target.files, 0));
                  })
              });
          break;
      case 1 :
          tmp$2 = null;
          break;
      case 2 :
          var match$10 = Setting$BtsCore.disabledObjects(disabled);
          var match$11 = state.showFile;
          var match$12 = state.showImage;
          var match$13 = state.showVideo;
          var match$14 = state.showAudio;
          var tmp$3;
          var exit = 0;
          if (match$10) {
            exit = 1;
          } else if (match$11) {
            if (match$12) {
              tmp$3 = React.createElement(Image$BtsCore.make, {
                    width: "auto",
                    height: "200px",
                    borderRadius: "6",
                    src: state.imagePath + state.src
                  });
            } else if (match$13) {
              tmp$3 = React.createElement(Media$BtsCore.make, {
                    width: "auto",
                    height: "200px",
                    borderRadius: "6",
                    src: state.imagePath + state.src
                  });
            } else if (match$14) {
              tmp$3 = React.createElement(Media$BtsCore.make, {
                    variant: "audio",
                    borderRadius: "6",
                    src: state.imagePath + state.src
                  });
            } else {
              exit = 1;
            }
          } else {
            tmp$3 = React.createElement(PasteInformation$BtsCore.make, {
                  titleSize: "12",
                  tile: "如果您的網址正確，這裡將會顯示圖片預覽",
                  instruction: "請注意，未經許可擅用他人在網路上的圖片，不但沒有禮貌，更是侵權的行為"
                });
          }
          if (exit === 1) {
            tmp$3 = React.createElement(ProgressCircular$BtsCore.make, {
                  size: "80",
                  color: "rgba(0,0,0,0.08)"
                });
          }
          tmp$2 = React.createElement(GridContainer$BtsCore.make, {
                direction: "column",
                justify: "center",
                alignItem: "stretch",
                children: null
              }, React.createElement(GridItem$BtsCore.make, {
                    top: "0",
                    right: "0",
                    bottom: "0",
                    left: "0",
                    xs: "auto",
                    children: React.createElement(TextFieldOutline$BtsCore.make, {
                          top: "0",
                          right: "0",
                          bottom: "0",
                          left: "0",
                          borderTop: "12",
                          borderBottom: "12",
                          type_: "text",
                          value: state.webValue,
                          disabled: Setting$BtsCore.disabledObjects(disabled),
                          onChange: (function ($$event) {
                              return Curry._1(changeWebSite, $$event.target.value);
                            }),
                          onKeyDown: (function ($$event) {
                              return Curry._1(keyDownWebSite, $$event.keyCode);
                            }),
                          children: "Please Paste Picture Path"
                        })
                  }), React.createElement(GridItem$BtsCore.make, {
                    top: "0",
                    right: "0",
                    bottom: "0",
                    left: "0",
                    xs: "auto",
                    children: React.createElement(PasteBoard$BtsCore.make, {
                          borderWidth: "0",
                          children: tmp$3
                        })
                  }));
          break;
      default:
        tmp$2 = null;
    }
    var match$15 = state.index;
    tmp$1 = React.createElement(DialogAnimationBottom$BtsCore.make, {
          showAnimation: true,
          children: null
        }, React.createElement(DialogTitle$BtsCore.make, {
              backgroundColor: "rgba(255,0,0,1)",
              color: "rgba(255,255,255,1)",
              children: "UPLOAD FILE"
            }), React.createElement(DialogContent$BtsCore.make, {
              right: "0",
              bottom: "0",
              left: "0",
              children: React.createElement(DialogContentText$BtsCore.make, {
                    children: null
                  }, React.createElement(GridItem$BtsCore.make, {
                        top: "0",
                        right: "0",
                        bottom: "6",
                        left: "0",
                        enterBackgroundColor: "rgba(255,0,0,1)",
                        backgroundColor: "rgba(255,0,0,1)",
                        xs: "12",
                        children: React.createElement(Tabs$BtsCore.make, {
                              id: "tool-",
                              index: state.index,
                              short: 10,
                              height: "3",
                              color: "rgba(255,255,255,1)",
                              children: $$Array.of_list(List.mapi((function (i, tabtitem) {
                                          return React.createElement(Tab$BtsCore.make, {
                                                      showTab: tabtitem.showTab,
                                                      borderRadius: "15",
                                                      id: "tool-" + String(i),
                                                      animationName: "none",
                                                      onClick: (function (param) {
                                                          return Curry._1(clickItemTab, i);
                                                        }),
                                                      children: React.createElement(IconAction$BtsCore.make, {
                                                            width: "28",
                                                            height: "28",
                                                            animation: "leftRight",
                                                            src: tabtitem.tabImage
                                                          })
                                                    });
                                        }), state.tabitems))
                            })
                      }), React.createElement(GridItem$BtsCore.make, {
                        top: "25",
                        right: "25",
                        left: "25",
                        xs: "12",
                        children: tmp$2
                      }))
            }), React.createElement(DialogActions$BtsCore.make, {
              children: React.createElement(GridItem$BtsCore.make, {
                    right: "0",
                    left: "0",
                    xs: "12",
                    children: React.createElement(GridContainer$BtsCore.make, {
                          direction: "rowReverse",
                          justify: "start",
                          alignItem: "center",
                          children: null
                        }, match$15 !== 1 ? React.createElement(GridItem$BtsCore.make, {
                                top: "0",
                                bottom: "0",
                                xs: "no",
                                children: React.createElement(Button$BtsCore.make, {
                                      enterBackgroundColor: "rgba(255,0,0,0.4)",
                                      downBackgroundColor: "rgba(255,0,0,0.2)",
                                      backgroundColor: "rgba(255,255,255,1)",
                                      color: "rgba(255,0,0,1)",
                                      disabled: Setting$BtsCore.disabledObjects(disabled),
                                      onClick: insertFile,
                                      children: "Send"
                                    })
                              }) : React.createElement(React.Fragment, undefined, React.createElement(GridItem$BtsCore.make, {
                                    top: "0",
                                    bottom: "0",
                                    left: "0",
                                    xs: "no",
                                    children: React.createElement(Button$BtsCore.make, {
                                          enterBackgroundColor: "rgba(255,0,0,0.4)",
                                          downBackgroundColor: "rgba(255,0,0,0.2)",
                                          backgroundColor: "rgba(255,255,255,1)",
                                          color: "rgba(255,0,0,1)",
                                          disabled: Setting$BtsCore.disabledObjects(disabled),
                                          children: "Recording"
                                        })
                                  }), React.createElement(GridItem$BtsCore.make, {
                                    top: "0",
                                    bottom: "0",
                                    xs: "no",
                                    children: React.createElement(Button$BtsCore.make, {
                                          enterBackgroundColor: "rgba(255,0,0,0.4)",
                                          downBackgroundColor: "rgba(255,0,0,0.2)",
                                          backgroundColor: "rgba(255,255,255,1)",
                                          color: "rgba(255,0,0,1)",
                                          disabled: Setting$BtsCore.disabledObjects(disabled),
                                          children: "ScreenShot"
                                        })
                                  })), React.createElement(GridItem$BtsCore.make, {
                              top: "0",
                              right: "0",
                              bottom: "0",
                              left: "0",
                              xs: "no",
                              children: React.createElement(Button$BtsCore.make, {
                                    enterBackgroundColor: "rgba(255,0,0,0.4)",
                                    downBackgroundColor: "rgba(255,0,0,0.2)",
                                    backgroundColor: "rgba(255,255,255,1)",
                                    color: "rgba(255,0,0,1)",
                                    disabled: Setting$BtsCore.disabledObjects(disabled),
                                    onClick: closeAnimation,
                                    children: "Cancel"
                                  })
                            }))
                  })
            }));
  } else {
    tmp$1 = null;
  }
  return React.createElement(React.Fragment, undefined, React.createElement(AppBar$BtsCore.make, {
                  backgroundColor: "rgba(255,255,255,1)",
                  position: "relative",
                  zIndex: "1",
                  minHeight: "40",
                  children: React.createElement(GridContainer$BtsCore.make, {
                        direction: "rowReverse",
                        justify: "center",
                        alignItem: "center",
                        children: null
                      }, React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "6",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: null
                          }, React.createElement(IconButton$BtsCore.make, {
                                padding: "4",
                                onClick: showMore,
                                children: null
                              }, React.createElement(Tooltip$BtsCore.make, {
                                    location: "top",
                                    backgroundColor: "rgba(255,0,0,0.8)",
                                    children: React.createElement(ReactIntl.FormattedMessage, {
                                          id: "Toolbar.more",
                                          defaultMessage: "More"
                                        })
                                  }), React.createElement(IconAction$BtsCore.make, {
                                    animation: "leftRight",
                                    src: Icons$BtsCore.arrowDownBlack
                                  })), tmp), React.createElement(GridItem$BtsCore.make, {
                            style: {
                              borderRight: "1px solid rgba(0,0,0,0.08)",
                              height: "25px",
                              marginTop: "6px",
                              marginRight: "3px"
                            },
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "3",
                            xs: "no",
                            children: null
                          }), match$5 ? React.createElement(GridItem$BtsCore.make, {
                              top: "0",
                              right: "0",
                              bottom: "0",
                              left: "0",
                              xs: "no",
                              children: React.createElement(IconButton$BtsCore.make, {
                                    padding: "4",
                                    onClick: indent,
                                    children: null
                                  }, React.createElement(Tooltip$BtsCore.make, {
                                        location: "top",
                                        backgroundColor: "rgba(255,0,0,0.8)",
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "Toolbar.increase",
                                              defaultMessage: "Increase"
                                            })
                                      }), React.createElement(IconAction$BtsCore.make, {
                                        animation: "leftRight",
                                        src: Icons$BtsCore.formatIndentIncreaseBlack
                                      }))
                            }) : null, match$6 ? React.createElement(GridItem$BtsCore.make, {
                              top: "0",
                              right: "0",
                              bottom: "0",
                              left: "0",
                              xs: "no",
                              children: React.createElement(IconButton$BtsCore.make, {
                                    padding: "4",
                                    onClick: outdent,
                                    children: null
                                  }, React.createElement(Tooltip$BtsCore.make, {
                                        location: "top",
                                        backgroundColor: "rgba(255,0,0,0.8)",
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "Toolbar.decrease",
                                              defaultMessage: "Decrease"
                                            })
                                      }), React.createElement(IconAction$BtsCore.make, {
                                        animation: "leftRight",
                                        src: Icons$BtsCore.formatIndentDecreaseBlack
                                      }))
                            }) : null, match$7 ? React.createElement(GridItem$BtsCore.make, {
                              top: "0",
                              right: "0",
                              bottom: "0",
                              left: "0",
                              xs: "no",
                              children: React.createElement(IconButton$BtsCore.make, {
                                    padding: "4",
                                    onClick: insertUnorderedlist,
                                    children: null
                                  }, React.createElement(Tooltip$BtsCore.make, {
                                        location: "top",
                                        backgroundColor: "rgba(255,0,0,0.8)",
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "Toolbar.bullist",
                                              defaultMessage: "Bullist"
                                            })
                                      }), React.createElement(IconAction$BtsCore.make, {
                                        animation: "leftRight",
                                        src: Icons$BtsCore.formatListBulletedBlack
                                      }))
                            }) : null, match$8 ? React.createElement(GridItem$BtsCore.make, {
                              top: "0",
                              right: "0",
                              bottom: "0",
                              left: "0",
                              xs: "no",
                              children: React.createElement(IconButton$BtsCore.make, {
                                    padding: "4",
                                    onClick: insertorderedlist,
                                    children: null
                                  }, React.createElement(Tooltip$BtsCore.make, {
                                        location: "top",
                                        backgroundColor: "rgba(255,0,0,0.8)",
                                        children: React.createElement(ReactIntl.FormattedMessage, {
                                              id: "Toolbar.ordlist",
                                              defaultMessage: "Ordlist"
                                            })
                                      }), React.createElement(IconAction$BtsCore.make, {
                                        animation: "leftRight",
                                        src: Icons$BtsCore.formatListNumberedBlack
                                      }))
                            }) : null, React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: null
                          }, React.createElement(IconButton$BtsCore.make, {
                                padding: "4",
                                onClick: showAlign,
                                children: null
                              }, React.createElement(Tooltip$BtsCore.make, {
                                    location: "top",
                                    backgroundColor: "rgba(255,0,0,0.8)",
                                    children: React.createElement(ReactIntl.FormattedMessage, {
                                          id: "Toolbar.align",
                                          defaultMessage: "Align"
                                        })
                                  }), React.createElement(IconAction$BtsCore.make, {
                                    animation: "leftRight",
                                    src: Icons$BtsCore.formatAlignRightBlack
                                  })), state.showAlign ? React.createElement(React.Fragment, undefined, React.createElement(SelectMenu$BtsCore.make, {
                                      top: "50%",
                                      transform: "translate(0, -50%)",
                                      minWidth: "auto",
                                      maxHeight: "280",
                                      minHeight: "0",
                                      topLeft: "12",
                                      topRight: "12",
                                      bottomRight: "12",
                                      bottomLeft: "12",
                                      paddingRight: "8",
                                      paddingLeft: "8",
                                      children: null
                                    }, React.createElement(MenuItem$BtsCore.make, {
                                          top: "0",
                                          right: "8",
                                          bottom: "0",
                                          left: "8",
                                          topLeft: "12",
                                          topRight: "12",
                                          bottomRight: "12",
                                          bottomLeft: "12",
                                          onClick: alignLeft,
                                          children: null
                                        }, React.createElement(Tooltip$BtsCore.make, {
                                              location: "top",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Toolbar.left",
                                                    defaultMessage: "Left"
                                                  })
                                            }), React.createElement(IconGeneral$BtsCore.make, {
                                              src: Icons$BtsCore.formatAlignLeftBlack
                                            })), React.createElement(MenuItem$BtsCore.make, {
                                          top: "0",
                                          right: "8",
                                          bottom: "0",
                                          left: "8",
                                          topLeft: "12",
                                          topRight: "12",
                                          bottomRight: "12",
                                          bottomLeft: "12",
                                          onClick: alignCenter,
                                          children: null
                                        }, React.createElement(Tooltip$BtsCore.make, {
                                              location: "top",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Toolbar.center",
                                                    defaultMessage: "Center"
                                                  })
                                            }), React.createElement(IconGeneral$BtsCore.make, {
                                              src: Icons$BtsCore.formatAlignCenterBlack
                                            })), React.createElement(MenuItem$BtsCore.make, {
                                          top: "0",
                                          right: "8",
                                          bottom: "0",
                                          left: "8",
                                          topLeft: "12",
                                          topRight: "12",
                                          bottomRight: "12",
                                          bottomLeft: "12",
                                          onClick: alignRight,
                                          children: null
                                        }, React.createElement(Tooltip$BtsCore.make, {
                                              location: "top",
                                              backgroundColor: "rgba(255,0,0,0.8)",
                                              children: React.createElement(ReactIntl.FormattedMessage, {
                                                    id: "Toolbar.right",
                                                    defaultMessage: "Right"
                                                  })
                                            }), React.createElement(IconGeneral$BtsCore.make, {
                                              src: Icons$BtsCore.formatAlignRightBlack
                                            }))), React.createElement(BackgroundBoard$BtsCore.make, {
                                      showBackground: state.showAlign,
                                      backgroundColor: "transparent",
                                      onClick: showAlign
                                    })) : null), React.createElement(GridItem$BtsCore.make, {
                            style: {
                              borderRight: "1px solid rgba(0,0,0,0.08)",
                              height: "25px",
                              marginTop: "6px",
                              marginRight: "3px"
                            },
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "3",
                            xs: "no",
                            children: null
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(IconButton$BtsCore.make, {
                                  padding: "4",
                                  children: null
                                }, React.createElement(Tooltip$BtsCore.make, {
                                      location: "top",
                                      backgroundColor: "rgba(255,0,0,0.8)",
                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                            id: "Toolbar.color",
                                            defaultMessage: "Color"
                                          })
                                    }), React.createElement(IconAction$BtsCore.make, {
                                      animation: "leftRight",
                                      src: Icons$BtsCore.textFormatBlack
                                    }))
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(IconButton$BtsCore.make, {
                                  padding: "4",
                                  onClick: underline,
                                  children: null
                                }, React.createElement(Tooltip$BtsCore.make, {
                                      location: "top",
                                      backgroundColor: "rgba(255,0,0,0.8)",
                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                            id: "Toolbar.underline",
                                            defaultMessage: "Underline"
                                          })
                                    }), React.createElement(IconAction$BtsCore.make, {
                                      animation: "leftRight",
                                      src: Icons$BtsCore.formatUnderlinedBlack
                                    }))
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(IconButton$BtsCore.make, {
                                  padding: "4",
                                  onClick: formatItalic,
                                  children: null
                                }, React.createElement(Tooltip$BtsCore.make, {
                                      location: "top",
                                      backgroundColor: "rgba(255,0,0,0.8)",
                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                            id: "Toolbar.italic",
                                            defaultMessage: "Italic"
                                          })
                                    }), React.createElement(IconAction$BtsCore.make, {
                                      animation: "leftRight",
                                      src: Icons$BtsCore.formatItalicBlack
                                    }))
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "0",
                            xs: "no",
                            children: React.createElement(IconButton$BtsCore.make, {
                                  padding: "4",
                                  onClick: formatBold,
                                  children: null
                                }, React.createElement(Tooltip$BtsCore.make, {
                                      location: "top",
                                      backgroundColor: "rgba(255,0,0,0.8)",
                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                            id: "Toolbar.bold",
                                            defaultMessage: "Bold"
                                          })
                                    }), React.createElement(IconAction$BtsCore.make, {
                                      animation: "leftRight",
                                      src: Icons$BtsCore.formatBoldBlack
                                    }))
                          }), React.createElement(GridItem$BtsCore.make, {
                            style: {
                              borderRight: "1px solid rgba(0,0,0,0.08)",
                              height: "25px",
                              marginTop: "6px",
                              marginRight: "3px"
                            },
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "3",
                            xs: "no",
                            children: null
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "6",
                            xs: "no",
                            children: null
                          }, React.createElement(IconButton$BtsCore.make, {
                                padding: "4",
                                onClick: showSize,
                                children: null
                              }, React.createElement(Tooltip$BtsCore.make, {
                                    location: "top",
                                    backgroundColor: "rgba(255,0,0,0.8)",
                                    children: React.createElement(ReactIntl.FormattedMessage, {
                                          id: "Toolbar.size",
                                          defaultMessage: "Size"
                                        })
                                  }), React.createElement(IconAction$BtsCore.make, {
                                    animation: "leftRight",
                                    src: Icons$BtsCore.formatSizeBlack
                                  })), state.showSize ? React.createElement(React.Fragment, undefined, React.createElement(SelectMenu$BtsCore.make, {
                                      top: "50%",
                                      transform: "translate(0, -50%)",
                                      minWidth: "auto",
                                      maxHeight: "280",
                                      minHeight: "0",
                                      topLeft: "12",
                                      topRight: "12",
                                      bottomRight: "12",
                                      bottomLeft: "12",
                                      paddingRight: "8",
                                      paddingLeft: "8",
                                      children: $$Array.map((function (sizeitem) {
                                              return React.createElement(MenuItem$BtsCore.make, {
                                                          top: "0",
                                                          right: "8",
                                                          bottom: "0",
                                                          left: "8",
                                                          disablePadding: sizeitem.disablePadding,
                                                          topLeft: "12",
                                                          topRight: "12",
                                                          bottomRight: "12",
                                                          bottomLeft: "12",
                                                          onClick: (function (param) {
                                                              return Curry._1(clickSizeMenu, sizeitem.size);
                                                            }),
                                                          children: sizeitem.value
                                                        });
                                            }), state.sizeitems)
                                    }), React.createElement(BackgroundBoard$BtsCore.make, {
                                      showBackground: state.showSize,
                                      backgroundColor: "transparent",
                                      onClick: showSize
                                    })) : null), React.createElement(GridItem$BtsCore.make, {
                            style: {
                              minWidth: "135px"
                            },
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "6",
                            xs: "auto",
                            children: null
                          }, React.createElement(SelectStandard$BtsCore.make, {
                                top: "0",
                                right: "0",
                                bottom: "0",
                                left: "0",
                                borderTop: "6",
                                borderBottom: "6",
                                borderWidth: "0",
                                enterBorderColor: "rgba(255,0,0,0.8)",
                                downBorderColor: "rgba(255,0,0,0.6)",
                                borderColor: "rgba(0,0,0,0.2)",
                                value: state.name,
                                disabled: Setting$BtsCore.disabledObjects(disabled),
                                onClick: showName,
                                children: /* tuple */[
                                  state.showName ? React.createElement(SelectMenu$BtsCore.make, {
                                          top: "50%",
                                          transform: "translate(0, -50%)",
                                          maxHeight: "280",
                                          minHeight: "0",
                                          topLeft: "12",
                                          topRight: "12",
                                          bottomRight: "12",
                                          bottomLeft: "12",
                                          paddingRight: "8",
                                          paddingLeft: "8",
                                          children: $$Array.map((function (nameitem) {
                                                  return React.createElement(MenuItem$BtsCore.make, {
                                                              top: "0",
                                                              right: "8",
                                                              bottom: "0",
                                                              left: "8",
                                                              disablePadding: nameitem.optionPadding,
                                                              topLeft: "12",
                                                              topRight: "12",
                                                              bottomRight: "12",
                                                              bottomLeft: "12",
                                                              onClick: (function (param) {
                                                                  return Curry._1(clickNameMenu, nameitem.value);
                                                                }),
                                                              children: nameitem.value
                                                            });
                                                }), state.nameitems)
                                        }) : null,
                                  React.createElement(IconGeneral$BtsCore.make, {
                                        animation: IconAnimation$BtsCore.topDownRorate(state.showName),
                                        src: Icons$BtsCore.arrowDownBlack
                                      })
                                ]
                              }), React.createElement(BackgroundBoard$BtsCore.make, {
                                showBackground: state.showName,
                                backgroundColor: "transparent",
                                onClick: showName
                              })), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "6",
                            xs: "no",
                            children: React.createElement(IconButton$BtsCore.make, {
                                  padding: "4",
                                  onClick: clickRedo,
                                  children: null
                                }, React.createElement(Tooltip$BtsCore.make, {
                                      location: "top",
                                      backgroundColor: "rgba(255,0,0,0.8)",
                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                            id: "Toolbar.redo",
                                            defaultMessage: "Redo"
                                          })
                                    }), React.createElement(IconAction$BtsCore.make, {
                                      animation: "leftRight",
                                      src: Icons$BtsCore.redoBlack
                                    }))
                          }), React.createElement(GridItem$BtsCore.make, {
                            top: "0",
                            right: "0",
                            bottom: "0",
                            left: "6",
                            xs: "no",
                            children: React.createElement(IconButton$BtsCore.make, {
                                  padding: "4",
                                  onClick: clickUndo,
                                  children: null
                                }, React.createElement(Tooltip$BtsCore.make, {
                                      location: "top",
                                      backgroundColor: "rgba(255,0,0,0.8)",
                                      children: React.createElement(ReactIntl.FormattedMessage, {
                                            id: "Toolbar.undo",
                                            defaultMessage: "Undo"
                                          })
                                    }), React.createElement(IconAction$BtsCore.make, {
                                      animation: "leftRight",
                                      src: Icons$BtsCore.undoBlack
                                    }))
                          }))
                }), tmp$1);
}

var make = ToolBar;

export {
  reducer ,
  initialState ,
  make ,
  
}
/* react Not a pure module */
